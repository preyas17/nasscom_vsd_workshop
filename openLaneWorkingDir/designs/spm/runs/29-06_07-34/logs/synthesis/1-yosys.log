
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/spm/src/spm.v
Parsing SystemVerilog input from `/openLANE_flow/designs/spm/src/spm.v' to AST representation.
Generating RTLIL representation for module `\spm'.
Generating RTLIL representation for module `\TCMP'.
Generating RTLIL representation for module `\CSADD'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/spm/runs/29-06_07-34/tmp/synthesis/hierarchy.dot'.
Dumping module spm to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \spm
Used module:     \CSADD
Used module:     \TCMP

3.2. Analyzing design hierarchy..
Top module:  \spm
Used module:     \CSADD
Used module:     \TCMP
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \spm
Used module:     \CSADD
Used module:     \TCMP

5.1.2. Analyzing design hierarchy..
Top module:  \spm
Used module:     \CSADD
Used module:     \TCMP
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/spm/src/spm.v:72$70 in module CSADD.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/spm/src/spm.v:42$63 in module TCMP.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\CSADD.$proc$/openLANE_flow/designs/spm/src/spm.v:72$70'.
Found async reset \rst in `\TCMP.$proc$/openLANE_flow/designs/spm/src/spm.v:42$63'.

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\CSADD.$proc$/openLANE_flow/designs/spm/src/spm.v:72$70'.
     1/2: $0\sc[0:0]
     2/2: $0\sum[0:0]
Creating decoders for process `\TCMP.$proc$/openLANE_flow/designs/spm/src/spm.v:42$63'.
     1/2: $0\s[0:0]
     2/2: $0\z[0:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\CSADD.\sum' using process `\CSADD.$proc$/openLANE_flow/designs/spm/src/spm.v:72$70'.
  created $adff cell `$procdff$72' with positive edge clock and positive level reset.
Creating register for signal `\CSADD.\sc' using process `\CSADD.$proc$/openLANE_flow/designs/spm/src/spm.v:72$70'.
  created $adff cell `$procdff$73' with positive edge clock and positive level reset.
Creating register for signal `\TCMP.\s' using process `\TCMP.$proc$/openLANE_flow/designs/spm/src/spm.v:42$63'.
  created $adff cell `$procdff$74' with positive edge clock and positive level reset.
Creating register for signal `\TCMP.\z' using process `\TCMP.$proc$/openLANE_flow/designs/spm/src/spm.v:42$63'.
  created $adff cell `$procdff$75' with positive edge clock and positive level reset.

5.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `CSADD.$proc$/openLANE_flow/designs/spm/src/spm.v:72$70'.
Removing empty process `TCMP.$proc$/openLANE_flow/designs/spm/src/spm.v:42$63'.
Cleaned up 0 empty switches.

5.3. Executing FLATTEN pass (flatten design).
Deleting now unused module CSADD.
Deleting now unused module TCMP.
<suppressed ~32 debug messages>

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 341 unused wires.
<suppressed ~2 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
checking module spm..
found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spm:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~320 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\spm' to `<abc-temp-dir>/input.blif'..
Extracted 189 gates and 285 wires to a netlist network with 96 inputs and 64 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       32
ABC RESULTS:              NAND cells:       31
ABC RESULTS:               NOR cells:       31
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:       31
ABC RESULTS:               XOR cells:       63
ABC RESULTS:        internal signals:      125
ABC RESULTS:           input signals:       96
ABC RESULTS:          output signals:       64
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 285 unused wires.
<suppressed ~6 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \spm

5.25.2. Analyzing design hierarchy..
Top module:  \spm
Removed 0 unused modules.

5.26. Printing statistics.

=== spm ===

   Number of wires:                234
   Number of wire bits:            295
   Number of public wires:          16
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_AND_                         32
     $_DFF_PP0_                     64
     $_NAND_                        31
     $_NOR_                         31
     $_OR_                           1
     $_XNOR_                        31
     $_XOR_                         63

5.27. Executing CHECK pass (checking for obvious problems).
checking module spm..
found and reported 0 problems.

6. Executing SHARE pass (SAT-based resource sharing).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 5 unused wires.
<suppressed ~5 debug messages>

9. Printing statistics.

=== spm ===

   Number of wires:                229
   Number of wire bits:            290
   Number of public wires:          11
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_AND_                         32
     $_DFF_PP0_                     64
     $_NAND_                        31
     $_NOR_                         31
     $_OR_                           1
     $_XNOR_                        31
     $_XOR_                         63

mapping tbuf

10. Executing TECHMAP pass (map to technology primitives).

10.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

11. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module spm..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

16. Executing SIMPLEMAP pass (map simple cells to gate primitives).

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/kunalg123/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

18. Executing SIMPLEMAP pass (map simple cells to gate primitives).

19. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

19.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\spm':
  mapped 64 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

20. Printing statistics.

=== spm ===

   Number of wires:                293
   Number of wire bits:            354
   Number of public wires:          11
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                317
     $_AND_                         32
     $_NAND_                        31
     $_NOR_                         31
     $_NOT_                         64
     $_OR_                           1
     $_XNOR_                        31
     $_XOR_                         63
     sky130_fd_sc_hd__dfrtp_2       64

[INFO]: ABC: WireLoad : S_4

21. Executing ABC pass (technology mapping using ABC).

21.1. Extracting gate netlist of module `\spm' to `/tmp/yosys-abc-g9IW55/input.blif'..
Extracted 253 gates and 350 wires to a netlist network with 97 inputs and 128 outputs.

21.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-g9IW55/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-g9IW55/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-g9IW55/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/spm/runs/29-06_07-34/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/spm/runs/29-06_07-34/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    7.77 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/spm/runs/29-06_07-34/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/spm/runs/29-06_07-34/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + buffer -N 5 -S 1000.0 
ABC: Node 228 has dup fanin 2.
ABC: Node 228 has dup fanin 3.
ABC: Node 228 has dup fanin 2.
ABC: Node 228 has dup fanin 3.
ABC: Node 230 has dup fanin 227.
ABC: Node 230 has dup fanin 228.
ABC: Node 230 has dup fanin 227.
ABC: Node 230 has dup fanin 228.
ABC: Node 235 has dup fanin 8.
ABC: Node 235 has dup fanin 9.
ABC: Node 235 has dup fanin 8.
ABC: Node 235 has dup fanin 9.
ABC: Node 237 has dup fanin 234.
ABC: Node 237 has dup fanin 235.
ABC: Node 237 has dup fanin 234.
ABC: Node 237 has dup fanin 235.
ABC: Node 239 has dup fanin 11.
ABC: Node 239 has dup fanin 12.
ABC: Node 239 has dup fanin 11.
ABC: Node 239 has dup fanin 12.
ABC: Node 241 has dup fanin 238.
ABC: Node 241 has dup fanin 239.
ABC: Node 241 has dup fanin 238.
ABC: Node 241 has dup fanin 239.
ABC: Node 243 has dup fanin 14.
ABC: Node 243 has dup fanin 15.
ABC: Node 243 has dup fanin 14.
ABC: Node 243 has dup fanin 15.
ABC: Node 245 has dup fanin 242.
ABC: Node 245 has dup fanin 243.
ABC: Node 245 has dup fanin 242.
ABC: Node 245 has dup fanin 243.
ABC: Node 247 has dup fanin 17.
ABC: Node 247 has dup fanin 18.
ABC: Node 247 has dup fanin 17.
ABC: Node 247 has dup fanin 18.
ABC: Node 249 has dup fanin 246.
ABC: Node 249 has dup fanin 247.
ABC: Node 249 has dup fanin 246.
ABC: Node 249 has dup fanin 247.
ABC: Node 251 has dup fanin 20.
ABC: Node 251 has dup fanin 21.
ABC: Node 251 has dup fanin 20.
ABC: Node 251 has dup fanin 21.
ABC: Node 253 has dup fanin 250.
ABC: Node 253 has dup fanin 251.
ABC: Node 253 has dup fanin 250.
ABC: Node 253 has dup fanin 251.
ABC: Node 255 has dup fanin 23.
ABC: Node 255 has dup fanin 24.
ABC: Node 255 has dup fanin 23.
ABC: Node 255 has dup fanin 24.
ABC: Node 257 has dup fanin 254.
ABC: Node 257 has dup fanin 255.
ABC: Node 257 has dup fanin 254.
ABC: Node 257 has dup fanin 255.
ABC: Node 259 has dup fanin 26.
ABC: Node 259 has dup fanin 27.
ABC: Node 259 has dup fanin 26.
ABC: Node 259 has dup fanin 27.
ABC: Node 261 has dup fanin 258.
ABC: Node 261 has dup fanin 259.
ABC: Node 261 has dup fanin 258.
ABC: Node 261 has dup fanin 259.
ABC: Node 263 has dup fanin 29.
ABC: Node 263 has dup fanin 30.
ABC: Node 263 has dup fanin 29.
ABC: Node 263 has dup fanin 30.
ABC: Node 265 has dup fanin 262.
ABC: Node 265 has dup fanin 263.
ABC: Node 265 has dup fanin 262.
ABC: Node 265 has dup fanin 263.
ABC: Node 267 has dup fanin 32.
ABC: Node 267 has dup fanin 33.
ABC: Node 267 has dup fanin 32.
ABC: Node 267 has dup fanin 33.
ABC: Node 269 has dup fanin 266.
ABC: Node 269 has dup fanin 267.
ABC: Node 269 has dup fanin 266.
ABC: Node 269 has dup fanin 267.
ABC: Node 271 has dup fanin 35.
ABC: Node 271 has dup fanin 36.
ABC: Node 271 has dup fanin 35.
ABC: Node 271 has dup fanin 36.
ABC: Node 273 has dup fanin 270.
ABC: Node 273 has dup fanin 271.
ABC: Node 273 has dup fanin 270.
ABC: Node 273 has dup fanin 271.
ABC: Node 275 has dup fanin 38.
ABC: Node 275 has dup fanin 39.
ABC: Node 275 has dup fanin 38.
ABC: Node 275 has dup fanin 39.
ABC: Node 277 has dup fanin 274.
ABC: Node 277 has dup fanin 275.
ABC: Node 277 has dup fanin 274.
ABC: Node 277 has dup fanin 275.
ABC: Node 279 has dup fanin 41.
ABC: Node 279 has dup fanin 42.
ABC: Node 279 has dup fanin 41.
ABC: Node 279 has dup fanin 42.
ABC: Node 281 has dup fanin 278.
ABC: Node 281 has dup fanin 279.
ABC: Node 281 has dup fanin 278.
ABC: Node 281 has dup fanin 279.
ABC: Node 283 has dup fanin 44.
ABC: Node 283 has dup fanin 45.
ABC: Node 283 has dup fanin 44.
ABC: Node 283 has dup fanin 45.
ABC: Node 285 has dup fanin 282.
ABC: Node 285 has dup fanin 283.
ABC: Node 285 has dup fanin 282.
ABC: Node 285 has dup fanin 283.
ABC: Node 287 has dup fanin 47.
ABC: Node 287 has dup fanin 48.
ABC: Node 287 has dup fanin 47.
ABC: Node 287 has dup fanin 48.
ABC: Node 289 has dup fanin 286.
ABC: Node 289 has dup fanin 287.
ABC: Node 289 has dup fanin 286.
ABC: Node 289 has dup fanin 287.
ABC: Node 291 has dup fanin 50.
ABC: Node 291 has dup fanin 51.
ABC: Node 291 has dup fanin 50.
ABC: Node 291 has dup fanin 51.
ABC: Node 293 has dup fanin 290.
ABC: Node 293 has dup fanin 291.
ABC: Node 293 has dup fanin 290.
ABC: Node 293 has dup fanin 291.
ABC: Node 295 has dup fanin 53.
ABC: Node 295 has dup fanin 54.
ABC: Node 295 has dup fanin 53.
ABC: Node 295 has dup fanin 54.
ABC: Node 297 has dup fanin 294.
ABC: Node 297 has dup fanin 295.
ABC: Node 297 has dup fanin 294.
ABC: Node 297 has dup fanin 295.
ABC: Node 299 has dup fanin 56.
ABC: Node 299 has dup fanin 57.
ABC: Node 299 has dup fanin 56.
ABC: Node 299 has dup fanin 57.
ABC: Node 301 has dup fanin 298.
ABC: Node 301 has dup fanin 299.
ABC: Node 301 has dup fanin 298.
ABC: Node 301 has dup fanin 299.
ABC: Node 303 has dup fanin 59.
ABC: Node 303 has dup fanin 60.
ABC: Node 303 has dup fanin 59.
ABC: Node 303 has dup fanin 60.
ABC: Node 305 has dup fanin 302.
ABC: Node 305 has dup fanin 303.
ABC: Node 305 has dup fanin 302.
ABC: Node 305 has dup fanin 303.
ABC: Node 307 has dup fanin 62.
ABC: Node 307 has dup fanin 63.
ABC: Node 307 has dup fanin 62.
ABC: Node 307 has dup fanin 63.
ABC: Node 309 has dup fanin 306.
ABC: Node 309 has dup fanin 307.
ABC: Node 309 has dup fanin 306.
ABC: Node 309 has dup fanin 307.
ABC: Node 311 has dup fanin 65.
ABC: Node 311 has dup fanin 66.
ABC: Node 311 has dup fanin 65.
ABC: Node 311 has dup fanin 66.
ABC: Node 313 has dup fanin 310.
ABC: Node 313 has dup fanin 311.
ABC: Node 313 has dup fanin 310.
ABC: Node 313 has dup fanin 311.
ABC: Node 315 has dup fanin 68.
ABC: Node 315 has dup fanin 69.
ABC: Node 315 has dup fanin 68.
ABC: Node 315 has dup fanin 69.
ABC: Node 317 has dup fanin 314.
ABC: Node 317 has dup fanin 315.
ABC: Node 317 has dup fanin 314.
ABC: Node 317 has dup fanin 315.
ABC: Node 319 has dup fanin 71.
ABC: Node 319 has dup fanin 72.
ABC: Node 319 has dup fanin 71.
ABC: Node 319 has dup fanin 72.
ABC: Node 321 has dup fanin 318.
ABC: Node 321 has dup fanin 319.
ABC: Node 321 has dup fanin 318.
ABC: Node 321 has dup fanin 319.
ABC: Node 323 has dup fanin 74.
ABC: Node 323 has dup fanin 75.
ABC: Node 323 has dup fanin 74.
ABC: Node 323 has dup fanin 75.
ABC: Node 325 has dup fanin 322.
ABC: Node 325 has dup fanin 323.
ABC: Node 325 has dup fanin 322.
ABC: Node 325 has dup fanin 323.
ABC: Node 327 has dup fanin 77.
ABC: Node 327 has dup fanin 78.
ABC: Node 327 has dup fanin 77.
ABC: Node 327 has dup fanin 78.
ABC: Node 329 has dup fanin 326.
ABC: Node 329 has dup fanin 327.
ABC: Node 329 has dup fanin 326.
ABC: Node 329 has dup fanin 327.
ABC: Node 331 has dup fanin 80.
ABC: Node 331 has dup fanin 81.
ABC: Node 331 has dup fanin 80.
ABC: Node 331 has dup fanin 81.
ABC: Node 333 has dup fanin 330.
ABC: Node 333 has dup fanin 331.
ABC: Node 333 has dup fanin 330.
ABC: Node 333 has dup fanin 331.
ABC: Node 335 has dup fanin 83.
ABC: Node 335 has dup fanin 84.
ABC: Node 335 has dup fanin 83.
ABC: Node 335 has dup fanin 84.
ABC: Node 337 has dup fanin 334.
ABC: Node 337 has dup fanin 335.
ABC: Node 337 has dup fanin 334.
ABC: Node 337 has dup fanin 335.
ABC: Node 339 has dup fanin 86.
ABC: Node 339 has dup fanin 87.
ABC: Node 339 has dup fanin 86.
ABC: Node 339 has dup fanin 87.
ABC: Node 341 has dup fanin 338.
ABC: Node 341 has dup fanin 339.
ABC: Node 341 has dup fanin 338.
ABC: Node 341 has dup fanin 339.
ABC: Node 343 has dup fanin 89.
ABC: Node 343 has dup fanin 90.
ABC: Node 343 has dup fanin 89.
ABC: Node 343 has dup fanin 90.
ABC: Node 345 has dup fanin 342.
ABC: Node 345 has dup fanin 343.
ABC: Node 345 has dup fanin 342.
ABC: Node 345 has dup fanin 343.
ABC: Node 347 has dup fanin 92.
ABC: Node 347 has dup fanin 93.
ABC: Node 347 has dup fanin 92.
ABC: Node 347 has dup fanin 93.
ABC: Node 349 has dup fanin 346.
ABC: Node 349 has dup fanin 347.
ABC: Node 349 has dup fanin 346.
ABC: Node 349 has dup fanin 347.
ABC: Node 351 has dup fanin 95.
ABC: Node 351 has dup fanin 96.
ABC: Node 351 has dup fanin 95.
ABC: Node 351 has dup fanin 96.
ABC: Node 353 has dup fanin 350.
ABC: Node 353 has dup fanin 351.
ABC: Node 353 has dup fanin 350.
ABC: Node 353 has dup fanin 351.
ABC: + upsize -D 10000.0 
ABC: Current delay (678.56 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    213 ( 40.8 %)   Cap = 10.6 ff ( 10.1 %)   Area =     1589.02 ( 59.2 %)   Delay =   729.52 ps  (  3.3 %)               
ABC: Path  0 --       1 : 0    1 pi                     A =   0.00  Df =   6.1   -4.2 ps  S =  17.8 ps  Cin =  0.0 ff  Cout =   4.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     226 : 1    4 sky130_fd_sc_hd__inv_2 A =   3.75  Df =  45.6  -11.8 ps  S =  47.1 ps  Cin =  4.5 ff  Cout =   8.8 ff  Cmax = 331.4 ff  G =  188  
ABC: Path  2 --     227 : 1    5 sky130_fd_sc_hd__buf_1 A =   3.75  Df = 192.0  -48.0 ps  S = 138.7 ps  Cin =  2.1 ff  Cout =  11.0 ff  Cmax = 130.0 ff  G =  499  
ABC: Path  3 --     228 : 1    5 sky130_fd_sc_hd__buf_1 A =   3.75  Df = 484.1 -144.5 ps  S = 316.7 ps  Cin =  2.1 ff  Cout =  26.4 ff  Cmax = 130.0 ff  G = 1239  
ABC: Path  4 --     229 : 1    1 sky130_fd_sc_hd__buf_1 A =   3.75  Df = 729.5 -192.9 ps  S = 215.4 ps  Cin =  2.1 ff  Cout =  17.6 ff  Cmax = 130.0 ff  G =  839  
ABC: Start-point = pi0 (\rst).  End-point = po1 ($auto$rtlil.cc:2281:NotGate$714).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   97/  128  lat =    0  nd =   213  edge =    528  area =1588.76  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-g9IW55/output.blif 

21.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       85
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       62
ABC RESULTS:        internal signals:      125
ABC RESULTS:           input signals:       97
ABC RESULTS:          output signals:      128
Removing temp directory.

22. Executing SETUNDEF pass (replace undef values with defined constants).

23. Executing HILOMAP pass (mapping to constant drivers).

24. Executing SPLITNETS pass (splitting up multi-bit signals).

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 352 unused wires.
<suppressed ~3 debug messages>

26. Executing INSBUF pass (insert buffer cells for connected wires).

27. Executing CHECK pass (checking for obvious problems).
checking module spm..
Warning: Wire spm.\p is used but has no driver.
found and reported 1 problems.

28. Printing statistics.

=== spm ===

   Number of wires:                281
   Number of wire bits:            312
   Number of public wires:          39
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                277
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a22o_2        31
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__and2_2        31
     sky130_fd_sc_hd__buf_1         85
     sky130_fd_sc_hd__dfrtp_2       64
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__o2bb2a_2      62

   Chip area for module '\spm': 3270.636800

29. Executing Verilog backend.
Dumping module `\spm'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 345069d0ed, CPU: user 0.83s system 0.05s, MEM: 44.34 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 35% 2x abc (0 sec), 25% 4x stat (0 sec), ...
